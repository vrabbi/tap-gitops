apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: where-for-dinner-search
  annotations:
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    ootb.apps.tanzu.vmware.com/apidescriptor-ref: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: where-for-dinner-search
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/workload-type: web
    networking.knative.dev/visibility: cluster-local
    app.kubernetes.io/component: run
    carto.run/workload-name: where-for-dinner-search
spec:
  template:
    metadata:
      annotations:
        apps.tanzu.vmware.com/debug: "true"
        apps.tanzu.vmware.com/live-update: "true"
        autoscaling.knative.dev/maxScale: "1"
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/target: "200"
        boot.spring.io/actuator: http://:8081/actuator
        boot.spring.io/version: 2.7.9
        conventions.carto.run/applied-conventions: |-
          appliveview-sample/app-live-view-appflavour-check
          developer-conventions/debug-convention
          developer-conventions/live-update-convention
          developer-conventions/add-source-image-label
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/app-live-view-appflavour-check
          spring-boot-convention/app-live-view-connector-boot
          spring-boot-convention/app-live-view-appflavours-boot
          spring-boot-convention/service-intent-postgres
          spring-boot-convention/service-intent-rabbitmq
          spring-boot-convention/service-intent-kafka
        developer.apps.tanzu.vmware.com/image-source-digest: harbor.vrabbi.cloud/library/sample-app:latest@sha256:62c46567bf171afe205040c02657092b6657f3c2e66bfd0c2bc4fb122ebc3f47
        developer.conventions/target-containers: workload
        services.conventions.carto.run/kafka: kafka-clients/3.1.2
        services.conventions.carto.run/postgres: r2dbc-postgresql/0.9.2.RELEASE
        services.conventions.carto.run/rabbitmq: amqp-client/5.14.2
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: where-for-dinner-search
        apps.tanzu.vmware.com/auto-configure-actuators: "true"
        apps.tanzu.vmware.com/workload-type: web
        carto.run/workload-name: where-for-dinner-search
        conventions.carto.run/framework: spring-boot
        networking.knative.dev/visibility: cluster-local
        services.conventions.carto.run/kafka: workload
        services.conventions.carto.run/postgres: workload
        services.conventions.carto.run/rabbitmq: workload
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.path: actuator
        tanzu.app.live.view.application.actuator.port: "8081"
        tanzu.app.live.view.application.flavours: spring-boot
        tanzu.app.live.view.application.name: where-for-dinner-search
    spec:
      containers:
      - env:
        - name: spring_profiles_active
          value: secure,mysql,rabbitmq
        - name: BPL_DEBUG_ENABLED
          value: "true"
        - name: BPL_DEBUG_PORT
          value: "9005"
        - name: JAVA_TOOL_OPTIONS
          value: -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.endpoint.health.show-details="always" -Dmanagement.endpoints.web.base-path="/actuator" -Dmanagement.endpoints.web.exposure.include="*" -Dmanagement.health.probes.enabled="true" -Dmanagement.server.port="8081" -Dserver.port="8080"
        image: harbor.vrabbi.cloud/tap/workloads/where-for-dinner-search-test-01@sha256:286d13382edb370ac0956ccca1e4734d2157133c67775c30e581178d953691da
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources:
          limits:
            cpu: 1500m
            memory: 750M
          requests:
            cpu: 100m
            memory: 500M
        securityContext:
          runAsUser: 1000
      serviceAccountName: default

