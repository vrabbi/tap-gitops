apiVersion: apps/v1
kind: Deployment
metadata:
  name: where-for-dinner-crawler
  annotations:
    kapp.k14s.io/update-strategy: fallback-on-replace
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/workload-type: server
    networking.knative.dev/visibility: cluster-local
    app.kubernetes.io/component: run
    carto.run/workload-name: where-for-dinner-crawler
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: run
      app.kubernetes.io/part-of: where-for-dinner-crawler
      apps.tanzu.vmware.com/auto-configure-actuators: "true"
      apps.tanzu.vmware.com/workload-type: server
      carto.run/workload-name: where-for-dinner-crawler
      conventions.carto.run/framework: spring-boot
      networking.knative.dev/visibility: cluster-local
  template:
    metadata:
      annotations:
        apps.tanzu.vmware.com/debug: "true"
        apps.tanzu.vmware.com/live-update: "true"
        autoscaling.knative.dev/maxScale: "1"
        autoscaling.knative.dev/minScale: "1"
        boot.spring.io/version: 3.0.3
        conventions.carto.run/applied-conventions: |-
          appliveview-sample/app-live-view-appflavour-check
          developer-conventions/debug-convention
          developer-conventions/live-update-convention
          developer-conventions/add-source-image-label
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-web
          spring-boot-convention/app-live-view-appflavour-check
        developer.apps.tanzu.vmware.com/image-source-digest: harbor.vrabbi.cloud/library/sample-app:latest@sha256:e46f24e206994f6dfab264f07b3e8c8119f70381d74ab96f6bf42fed78845bc5
        developer.conventions/target-containers: workload
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: where-for-dinner-crawler
        apps.tanzu.vmware.com/auto-configure-actuators: "true"
        apps.tanzu.vmware.com/workload-type: server
        carto.run/workload-name: where-for-dinner-crawler
        conventions.carto.run/framework: spring-boot
        networking.knative.dev/visibility: cluster-local
    spec:
      containers:
      - env:
        - name: BPL_DEBUG_ENABLED
          value: "true"
        - name: BPL_DEBUG_PORT
          value: "9005"
        - name: JAVA_TOOL_OPTIONS
          value: -Dserver.port="8080"
        image: harbor.vrabbi.cloud/tap/workloads/where-for-dinner-crawler-test-01@sha256:c3ea41b0603d88700b880987c0fc96751ff7c99da485d9ad53e1fa9beb58ff6f
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: 1500m
            memory: 750M
          requests:
            cpu: 100m
            memory: 500M
        securityContext:
          runAsUser: 1000
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: where-for-dinner-crawler
  labels:
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/workload-type: server
    networking.knative.dev/visibility: cluster-local
    app.kubernetes.io/component: run
    carto.run/workload-name: where-for-dinner-crawler
spec:
  selector:
    app.kubernetes.io/component: run
    app.kubernetes.io/part-of: where-for-dinner-crawler
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/workload-type: server
    carto.run/workload-name: where-for-dinner-crawler
    conventions.carto.run/framework: spring-boot
    networking.knative.dev/visibility: cluster-local
  ports:
  - targetPort: 8080
    port: 8080
    name: "8080"
  - targetPort: 8080
    port: 80
    name: http

